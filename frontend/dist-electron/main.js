"use strict";const o=require("electron"),O=require("path"),x=require("child_process"),N=require("fs");function b(t){const s=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(t){for(const r in t)if(r!=="default"){const n=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(s,r,n.get?n:{enumerable:!0,get:()=>t[r]})}}return s.default=t,Object.freeze(s)}const d=b(O),E=b(N);if(typeof o=="string")throw new TypeError("Not running in an Electron environment!");const{env:J}=process,q="ELECTRON_IS_DEV"in J,T=Number.parseInt(J.ELECTRON_IS_DEV,10)===1,D=q?T:!o.app.isPackaged,w=Object.freeze(Object.defineProperty({__proto__:null,default:D},Symbol.toStringTag,{value:"Module"}));let a=null,e=null,j=0;const f=new Map,g=d.resolve(__dirname,".."),I=o.app.isPackaged||process.env.NODE_ENV==="production",_=I?process.resourcesPath:g,L=()=>{if(process.platform==="win32"){const t=d.join(_,"python","python.exe");return E.existsSync(t)?t:"python"}else{const t=d.join(_,"python","bin","python3");return E.existsSync(t)?t:"python3"}};function P(){return new Promise((t,s)=>{a=new o.BrowserWindow({width:1280,height:800,minWidth:1024,minHeight:768,frame:!1,titleBarStyle:"hidden",webPreferences:{nodeIntegration:!0,contextIsolation:!1,webSecurity:!w,preload:d.join(__dirname,"preload.js")},icon:d.join(__dirname,"../public/icon.png")});const r=w?"http://localhost:3000":`file://${d.join(g,"dist/index.html")}`;a.loadURL(r).then(()=>(w&&a?.webContents.openDevTools(),o.ipcMain.on("minimize-window",()=>{a&&a.minimize()}),o.ipcMain.on("maximize-window",()=>{a&&(a.isMaximized()?a.unmaximize():a.maximize())}),o.ipcMain.on("close-window",()=>{a&&a.close()}),a?.on("closed",()=>{e&&(e.kill(),e=null),a=null}),W().then(()=>(console.log("Jarvis service started successfully"),S({type:"ping",data:{}}))).then(n=>{console.log("Jarvis service test response:",n),t()}))).catch(n=>{console.error("Failed to load app:",n),s(n)})})}function W(){return new Promise((t,s)=>{if(e)return console.log("Jarvis service already running"),t();try{const r=L(),n=d.join(__dirname,"jarvis_service.py");if(console.log(`Starting Jarvis service with Python: ${r}`),console.log(`Script path: ${n}`),e=x.spawn(r,[n],{stdio:["pipe","pipe","pipe"],shell:!0,env:{...process.env,PYTHONPATH:d.join(g,".."),PYTHONIOENCODING:"utf-8",PYTHONUNBUFFERED:"1"}}),!e||!e.pid)throw new Error("Failed to spawn Jarvis process");let u="";if(e.stdout){const c=y=>{try{const i=y.toString();u+=i;const h=u.split(`

`);u=h.pop()||"";for(const p of h)if(p.trim())try{const l=JSON.parse(p);if(console.log("Jarvis response:",l),l.request_id!==void 0){const v=f.get(l.request_id);v&&(v(l),f.delete(l.request_id))}}catch(l){console.error("Error parsing Jarvis response:",l,"Raw:",p)}}catch(i){console.error("Error processing stdout data:",i)}};e.stdout.on("data",c)}e.stderr&&e.stderr.on("data",c=>{console.error(`Jarvis Error: ${c.toString()}`)}),e.on("error",c=>{console.error("Failed to start Jarvis process:",c),e=null,s(c)}),e.on("close",c=>{console.log(`Jarvis process exited with code ${c}`),e=null,c!==0&&console.error(`Jarvis process exited with code ${c}`)}),setTimeout(t,1e3)}catch(r){console.error("Failed to start Jarvis service:",r),e=null,s(r)}})}function S(t){return new Promise((s,r)=>{if(!e)return r(new Error("Jarvis service is not running"));const n=j++,u={...t,request_id:n};f.set(n,i=>{i.type==="error"?r(new Error(i.error||"Unknown error from Jarvis service")):s(i)});const c=JSON.stringify(u)+`

`;new Promise((i,h)=>{if(!e||!e.stdin){h(new Error("Jarvis process or stdin is not available"));return}const p=()=>{e.stdin?.removeListener("error",l),i()},l=m=>{e.stdin?.removeListener("drain",p),h(m)};e.stdin.once("drain",p),e.stdin.once("error",l),e.stdin.write(c,m=>{e.stdin?.removeListener("drain",p),e.stdin?.removeListener("error",l),m?h(m):i()})===!1||(e.stdin?.removeListener("drain",p),e.stdin?.removeListener("error",l),i())}).then(()=>{}).catch(i=>{f.delete(n),r(i)}),setTimeout(()=>{f.has(n)&&(f.delete(n),r(new Error("Request to Jarvis service timed out")))},3e4)})}o.ipcMain.handle("jarvis:processInput",async(t,s)=>{try{return(await S({type:"process_input",data:{text:s}})).data||{success:!1,error:"No response data"}}catch(r){return console.error("Error processing input:",r),{success:!1,error:r instanceof Error?r.message:"Unknown error",response:"I'm sorry, but I'm having trouble processing your request."}}});o.app.whenReady().then(()=>{P().catch(console.error),o.app.on("activate",()=>{o.BrowserWindow.getAllWindows().length===0&&P().catch(console.error)})});o.app.on("window-all-closed",()=>{process.platform!=="darwin"&&o.app.quit()});o.app.on("will-quit",()=>{e&&(e.kill(),e=null),f.clear()});o.app.on("web-contents-created",(t,s)=>{s.getType()==="window"&&s.setWindowOpenHandler(({url:r})=>{if(r.startsWith("http://localhost:")||r.startsWith("file://"))return{action:"allow"};try{const n=o.shell.openExternal(r);n&&typeof n=="object"&&"catch"in n&&n.catch(u=>{console.error("Failed to open external URL:",u)})}catch(n){console.error("Error opening external URL:",n)}return{action:"deny"}})});
